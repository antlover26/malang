==============================================================================================
TODO:
    + Types need a trivial recursion check 
    + Type aliasing
    + Option type (Some(42) | None)
    + Uninitialized type properties are only allowed to be Option<Thing>
    + Type properties are allowed to be anonymous functions and currently they attempt to
    resolve as a method instead of a field.
    + Write fuzzer for VM instructions
    + Write fuzzer for parser
    + Come up with something better than branching over function definitions
    + Generational GC
    + Since it is all known at compile time, it should be possible to make a table of where
    every reference will be on the stack at any given time which would allow the removal of
    NaN-boxing and the small overhead from unboxing. This would also allow for full 64-bit
    integers. Cursory testing(no object allocation) shows this as being roughly a 2-10%
    speed increase


    + VM "stacks" are fixed size with magic numbers, these probably should be allocated up
    front by a variable/command line argument.

==============================================================================================
Parametric typing:
    ? Generics should be parsed into their own special AST nodes which would allow them to be
    instantiated only when they are used and for those specific types; this is essentially
    generics via templates in C++

    ? The Type_Map will want some way to push/pop scope of these generic types so they are
    only visible within that type/function/trait. This allows generics in different scopes to
    share the same name for their generic types.

    ? Generic "Type_Information" returned by the Type_Map will want to be able to replace
    itself with an existing type which gives the illusion of type instantiation. This allows
    it to appear as a concrete type from the middle and back-end perspectives.

==============================================================================================
Vocabulary:

    primitive:
        A function written in the host language that does trivial operations.
        e.g: 1.5 + 2

    builtin:
        A function written in the host language used to do otherwise impossible operations.
        e.g: reading or writing a file, manually controlling the garbage collector

    garbage collector:
        The virtual machine's automatic memory manager. It periodically (or at user defined
        times) checks the system for memory that is no longer reachable by the program and
        frees it for reuse.

    function:
        A first-class value representing a procedure of program code.

    bound function:
        A function that is literally named and can share this name with other bound functions
        when their parameters are different.

    IIFE:
        Immediately Invoked Function Expression, an unnamed function that runs immediately.

    closure:
        A function defined inside of another function's defintion is capable of capturing
        state from the parent function's scope.

==============================================================================================
VM Calling Convention:

    Arguments:
    + VM call arguments are passed using the data stack and should be passed in order from
    left to right

    Return values:
    + Since the data stack is also used to return any number of values from functions, it is
    the callee's responsibility to drop arguments before returning.

    + To solve this, upon entering a function we immediately transfer the arguments into
    local variables. Since arguments are passed from left to right this means the top of the
    data stack is the last argument and they should be stored into local variables in reverse
    order.
    func :: fn (a: int, b: int, c: int) {...}
                L0      L1      L2
    func(1,2,3)
    TOS -> 3, 2, 1
    Store_Local_2 'c
    Store_Local_1 'b
    Store_Local_0 'a

    Local variables:
    + Local variables use a separate `locals' stack and allocating/freeing space on this stack
    is controlled by the callee itself.

    Instance Method calls:
    + The object instance is implicitly passed to a method call first. Doing this allows the
    instance to always be accessible with Load/Store_Local_0. This also makes chaining method
    calls more fluid because it is a simple Load_Local_0 before calling a method within
    another method.

    Example of a call with a multi-return:

        rot :: fn (a: int, b: int, c: int) -> (int, int, int) {
            return b, c, a
        }
        x, _, z := rot(1, 2, 3)

        after the call to 'rot data stack:
        3     <- TOP
        2
        1

        ; 'rot
        Allocate_Locals <3>
        Store_Local_2       ; 'c
        Store_Local_1       ; 'b
        Store_Local_0       ; 'a
        Load_Local_1        ; 'b
        Load_Local_2        ; 'c
        Load_Local_0        ; 'a
        Return

        after the return of 'rot data stack:
        1     <- TOP
        3
        2

        Literal <1>         ; 1->a
        Literal <2>         ; 2->b
        Literal <3>         ; 3->c
        Load_Global <0>     ; 'rot
        Call_Dyn            ; call 'rot
        Store_Local_1       ; store 1 in 'z
        Drop_1              ; drop 3
        Store_Local_0       ; store 2 in 'x
        Drop_3              ; drop args(3,2,1)

==============================================================================================
Type and alias syntax:

    # Strong type alias can be used to make psuedo-"subtypes" with no runtime overhead
    # There probably needs to be an "unalias" keyword to bring an instance of an aliased type
    # back to its original type

    type Thing = {
        name: string
        data: [10]int

        fn do_stuff() { ... }
    }

    type alias ThingUtil = Thing

    extend ThingUtil {
        fn print_name() {
            println(self.name)
        }
    }

    t := Thing()
    t.print_name()     # compile error, no method `print_name' exists for type `Thing'
    t.do_stuff()       # ok
    tu := ThingUtil()
    tu.print_name()    # ok  ThingUtil:print_name()
    tu.do_stuff()      # ok  Thing:do_stuff()

    type alias cents   = int
    type alias dollars = int
    type alias time_ms = int

    # `fn cents(int) -> cents'
    # `fn dollars(int) -> dollars'
    # `fn time_ms(int) -> time_ms'
    # could all be implicitly recognized as a type conversion that results into a NOOP 

    fn cents(d: dollars) -> cents {
        return cents(unalias(d) * 100)
    }
    fn dollars(c: cents) -> dollars {
        return dollars(unalias(c) / 100)
    }

    money    := dollars(45)    # ok: 45
    pennies  := cents(dollars) # ok: 450
    duration := time_ms(2750)  # ok: 2750

    bad := cents(duration)     # compile error, no conversion exists
    bad := dollars(duration)   # compile error, no conversion exists
    ok  := dollars(45)         # 45 is an int which is the aliased type
    ok  := cents(9999)         # 9999 is an int which is the aliased type
    bad := cents(42.69)        # 42.69 is not an int

    # the above creates an interesting scenario because something like:
    #   `fn print(dollars) -> void'
    #   `fn println(dollars) -> void'
    # doesn't exist, however `fn print(int) -> void' does exist. This is reasonable because
    # printing dollars in the same format as printing an integer doesn't really make sense.
    # One implementation of `print' and `println' for dollars might look like:
    fn print(dollars: dollars) {
        # $123
        print(?$)
        # notice you can print it using the `int' version by using unalias
        print(unalias(dollars))
    }
    fn println(dollars: dollars) {
        print(dollars)
        println()
    }

    # how will aliasing an aliased type be handled and does it even make sense to be legal?
    type alias A = int
    type alias B = A
    type alias C = B

    # are these legal?
    a := A(42)          # this is always ok
    b := B(123)         # B is not aliased to int
    b := B(A(123))      # this is ok, but very verbose for a NOOP
    c := C(123)         # following B, this isn't legal
    c := C(B(123))      # this isn't legal because B(123) isn't legal
    c := C(B(A(123)))   # this is ok, but again, it's very verbose for a NOOP

    # what would the types of these be?
    unalias(b) # `A' or `int'?
    unalias(c) # `B' or `int'?

    # extensions are the only place this makes sense, using the above `Thing' and `ThingUtil'

    extend Thing {
        fn baz() {
            println("baz")
        }
    }

    extend ThingUtil {
        fn bar() {
            println("bar")
            self.baz()     # Thing:baz
        }
    }

    type alias ThingWithMoreUtil = ThingUtil
    extend ThingWithMoreUtil {
        fn foo() {
            println("foo")
            self.bar()     # ThingUtil:bar
        }
    }


    t := Thing()
    t.baz()      # Thing:baz
    t.bar()      # compile error
    t.foo()      # compile error

    tu := ThingWithUtil(t)
    tu.baz()     # Thing:baz
    tu.bar()     # ThingUtil:bar
    tu.foo()     # compile error

    tmu := ThingWithMoreUtil(tu)
    tmu.baz()    # Thing:baz
    tmu.bar()    # ThingUtil:bar
    tmu.foo()    # ThingWithMoreUtil:foo



==============================================================================================
Block as values:

    x := let {
        local_here_1 := get_result()
        local_here_2 := do_thing()
        local_here_1 + local_here_2
    }

    x is now the value of local_here_1 + local_here_2


    y := for haystack {
        if it == the_needle {
            break "found"
        }
    } else "not found"
    } nobreak "not found"
    } default "not found"




    need to drop unused expression values:
    x := 0
    while x < 100000 {
        1 # <--- this will just fill the data stack with 1s in some cases
        x = x + 1
    }

    if (for m.params {
        if it.type == params[it_idx].type
            break false
        } else true) {
        return m
    }

==============================================================================================
Garbage Collection:
    visit everything:
        VM::globals
        VM::locals
        VM::data_stack

        0. if it's not a pointer, skip
        1. if it's already black, skip
        2. mark object grey
        3. for each object this object references go to 2
        4. mark this object black
        5. visit all objects in the global object store
        6. if it's black, mark it white for the next run, and skip
        7. if it's grey, throw an error, there should be no grey objects while freeing
        8. if it's white, mark it as free

==============================================================================================
DONE:

Oct 12, 2017:
    + Figure out how to store floats/doubles
      ? no primitive floating point types, box them all?
      ? tagged pointers, integers go to 31 or 63 bits, some overhead
      ? maybe this is solvable with locals reordering or some analysis at compile time
    + Implemented a Value system using boxed nans, abusing 48 bit pointers and 32 bit fixnums

Oct 13, 2017:
    + Implemented basic tri-color GC, it needs to link better with the VM.
      * GC needs lots of testing
      * in the future, the GC could benefit from generations.
      * currently, it only looks at how many objects are allocated and not how much space
        an object occupies

    + Implemented some of the necessary base IR nodes

Oct 14, 2017:
    + Implement the IR tree structs
    + First source to bytecode translation!
    + Partial implementation of AST to IR converter
    + Partial implementation of IR to bytecode converter

Oct 15, 2017:
    + Documented the VM's instruction set
    + Implemented some VM instructions
    + Fixed some VM instructions
    + Partial implementation of LValue/RValue concepts to make AST to IR translation easier

Oct 16, 2017:
    + Added source locations to AST nodes
    + Bringing the Type_Map towards being useful during source parsing and IR translation

Oct 17, 2017:
    + Implemented better VM helper functions
    + Implemented argument access in the VM
    + Implemented class definition parsing
    + Implemented declaration+assign parsing
    + Implemented declaration+constant parsing
    + Implemented type parsing

Oct 18, 2017:
    + Implemented some primitives methods for fixnum and double operators
    + Implemented a new VM instruction called Call_Primitive
    + Most(all?) IR expressions are now IR_Values and contain type information.

Oct 19, 2017:
    + Turned IR Binary operators into deducible method calls
    + Can now compile multi-expression expressions into VM code
    + Cleaned up some of the VM runtime stuff
    + Factored out some code repetition
    + Implemented more instructions in the Codegen
    + Implemented very basic symbols e.g:
      x := 10;
      y := 11;
      z := 2 * (x + y);
      z; // leaves 42 at the top of the stack

Oct 20, 2017:
    --

Oct 21, 2017:
    + Better disassembly output
    + Fixed bug in branch codegen
    + Basic function code generator
    + Basic call generation
    + IR_Labels have the ability to backfill their addresses after calculation

Oct 22, 2017:
    + Hackery to call builtin free functions
    + New VM instruction: Call_Dyn
    + New VM instruction: Call_Primitive_Dyn
    
Oct 23, 2017:
    + Implemented optional computed gotos for VM dispatch

Oct 24, 2017:
    + Calls now drop their arguments when appropriate
    + Implemented While loop
    + Converted VM to hand-inlined instruction dispatch (~10% speedup)
    + Implemented If/Else
    + Implemented Logical And

Oct 25, 2017:
    + Changed the way arguments are handled making it more natural:
        *OPTIMIZATION POTENTIAL*
        Arguments are now immediatly transferred from the stack to locals in bytecode
        this leaves them accessible from 0 in the order they are declared
        fn (a: int, b: int, c: int)
            L0      L1      L2
    + To compensate for combining arguments into the locals, the Load/Store_Arg instructions
    have been replaced with Load/Store_Local_4,5,6,7,8, and 9

Oct 26, 2017:
    + Implemented array literal parsing
    + Implemented new array parsing
    + Implemented arrays into the object system
    + Implemented array instructions into the VM
    + Implemented array allocation into the language
    + Implemented array indexing into the language

Oct 27, 2017:
    + Fixed various memory leaks in the IR
    + IR_Nodes are now owned by the Malang_IR that allocated them.
    + Switched GC/Allocation to a O(1) unordered-vector system, no more linked list!
    + Fixed bugs when freeing in the GC
    + Naive string parsing
    + Added buffer type which is a block of memory with byte-index granularity
    + String constants get automatically copied into buffers
      ? Maybe implement some kind of copy-on-write for string constants so they aren't copied
      over and over again when used in a loop.
      ? Maybe `string' type is a purely immutable primitive

Oct 28, 2017:
    + Implemented hard-binding functions, which means a function can be literally named and
    have other functions share the same name if their parameters differ. Type inference will
    decide which function to call.
    + Fixed parsing stuff like "x().aa[123].b.c().z"
    + Started implementing member lookup -- just array and buffer's ".length" which are
    compiled into the corresponding Array_Length and Buffer_Length instructions.
    + Made a mess of the way symbols are looked up, need to consolidate primitives, bound
    functions, and regular variables into a singular collection.
    + Implemented a map to lookup bound native and compiled functions, still need to move
    all of the primitives and builtins into this map.

Oct 29, 2017:
    + Partially implemented type extensions which allow for operator overloading of the
    operators:
        +, -, *, /, !, ~, &, |, ^, [], []=, <<, >>, <, >, <=, >=, ==, !=
    + Implemented extension methods e.g:
    extend int {
        fn print() -> void {
            println(self)
        }
        fn rets42() -> int {
            return 42
        }
    }
    123.rets42().print() # prints 42

Oct 30, 2017:
    + Enabled the GC to alloc unmanaged objects
    + Implemented strings as immutable objects
    + Implemented Load/Store_Fields in the codgen
    + Implemented Load/Store_Fields in the VM
    + Implemented println(string)
    + Implemented readonly/constness for variables
    + Implemented readonly/constness for `self' instance

Oct 31, 2017:
    + Implemented default empty constructor
    + Fixed various bugs related to scope resolution
    + Fixed allocating an array of objects
    + Property chaining now works as expected
    + Factored some duplicated code in Ast_To_IR

Nov 1, 2017:
    + Improved lexing/parsing by contextually inserting semicolons into the token list.
    Expressions should end on line break and a `\' before a line break should allow the
    expression to continue on to the next line.
    + Implemented a very basic interactive debugger for the `switch' dispatch variant of
    the VM. It provides some useful tools like disassembling instructions, stepping through
    code, continuing until return, continuing until the next breakpoint, and inspecting the
    stack
    + Hooked up a builtin `pfn breakpoint() -> void' to trigger breakpoints in code.

Nov 2, 2017:
    + Calling methods without self now correctly resolves and implicitly passes it.
    + Added a flag to mute most the non-critical diagnostics
    + Implemented a script for running the compiler with source and comparing to expected
    output.
    + break, continue, and for parsing
    + implemented basic iterator traits which wants the thing to implement:
        `fn move_next() -> bool' and fn current() -> T' where T is not void

Nov 10, 2017:
    + Fixed some bugs in the GC and string concat builtin
    + Added some interesting extensions to `examples/tests/string.ma'

Nov 11, 2017:
    + Fixed scoping bug in extensions where an extension method would be visible in global
    scope and reserve that variable name. Also added some regression tests for this
    + Added `char' type and updated strings and buffers to be composed of them
    + Added character literal syntax: ?a ?b ?c ?\t ?\n ?# etc.

Nov 12, 2017:
    + Implemented array literals of one type
    + Experimenting with giving named functions visibility precedence over constructors
      ? Maybe require any named functions sharing a type's name to return that type, this
      acts as a way to implement casting. There should be some checking to ensure there
      aren't conflicts with ambigious parameters, precedence should probably favor the
      constructors in this case.

Nov 13, 2017:
    + Parsing imports
    + Partial implementation of Module_Map and Module
    + Indexing can now correctly accept multiple indices

Nov 14, 2017:
    ??

Nov 15, 2017:
    + Modules load relative to CWD

Nov 16, 2017:
    + Modules first try to load relative to the file containing the import
    + Updated some tests to use imports + lib
    + Example bf_2_c transpiler in examples/bf_2_c.ma
    + Documentation for builtins
