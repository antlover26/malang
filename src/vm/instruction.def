#ifndef ITEM
#define ITEM(X)
#endif

// pop 2 fixnums from datastack, add them, push result to datastack
ITEM(Fixnum_Add)

// pop 2 fixnums from datastack, subtract them, push result to datastack
ITEM(Fixnum_Subtract)

// pop 2 fixnums from datastack, multiply them, push result to datastack
ITEM(Fixnum_Multiply)

// pop 2 fixnums from datastack, divide them, push result to datastack
ITEM(Fixnum_Divide)

// pop 2 fixnums from datastack, modulus them, push result to datastack
ITEM(Fixnum_Modulo)

// pop 2 fixnums from datastack, and them, push result to datastack
ITEM(Fixnum_And)

// pop 2 fixnums from datastack, or them, push result to datastack
ITEM(Fixnum_Or)

// pop 2 fixnums from datastack, xor them, push result to datastack
ITEM(Fixnum_Xor)

// pop 2 fixnums from datastack, shift the first left by the second, push result to datastack
ITEM(Fixnum_Left_Shift)

// pop 2 fixnums from datastack, shift the first right by the second, push result to datastack
ITEM(Fixnum_Right_Shift)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Equals)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Not_Equals)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Greater_Than)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Greater_Than_Equals)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Less_Than)

// pop 2 fixnums from datastack, compare them, push result to datastack
ITEM(Fixnum_Less_Than_Equals)

// pop 1 fixnum from datastack, negate it, push result to datastack
ITEM(Fixnum_Negate)

// pop 1 fixnum from datastack, invert it, push result to datastack
ITEM(Fixnum_Invert)

// does nothing
ITEM(Noop)

// assumes the next byte of the bytecode is an 8-bit integer to push to the datastack
ITEM(Literal_8)

// assumes the next 2 bytes of the bytecode is a 16-bit integer to push to the datastack
ITEM(Literal_16)

// assumes the next 4 bytes of the bytecode is a 32-bit integer to push to the datastack
ITEM(Literal_32)

// assumes the next 8 bytes of the bytecode is a value to push to the datastack
ITEM(Literal_value)

// gets the type of a value and pushes it to the datastack
ITEM(Get_Type)

// assumes the next 4 bytes of the bytecode is a 32-bit integer representing how far to jump
ITEM(Branch)

// pops the top of the stack
// assumes the next 4 bytes of the bytecode is a 32-bit integer representing how far to jump
// if the value popped is zero
ITEM(Pop_Branch_If_Zero)

// pops the top of the stack
// assumes the next 4 bytes of the bytecode is a 32-bit integer representing how far to jump
// if the value popped is not zero
ITEM(Pop_Branch_If_Not_Zero)

// assumes the next 4 bytes of the bytecode is a 32-bit integer representing how far to jump
// if the top of stack is zero
ITEM(Branch_If_Zero)

// assumes the next 4 bytes of the bytecode is a 32-bit integer representing how far to jump
// if the top of stack is not zero
ITEM(Branch_If_Not_Zero)

// restore previous locals frame, pop IP from return stack, set IP to this value
ITEM(Return)

// pop IP from return stack, set IP to this value
ITEM(Return_Fast)

// setup call frame, assumes the next 4 bytes of the bytecode is a 32-bit integer
// representing where to set the IP
ITEM(Call)

// setup call frame, assumes the next 4 bytes of the bytecode is a 32-bit integer
// representing an index into the primitives table, call this primitive
ITEM(Call_Primitive)

// setup call frame, pop value from datastack and set IP to that value
ITEM(Call_Dyn)

// setup call frame, pop value from datastack as an index into the primitives table
// and call this primitive
ITEM(Call_Primitive_Dyn)

// the next 4 bytes of the bytecode is a 32-bit index into the globals table, push the value
// pointed at by this index to the top of the datastack
ITEM(Load_Global)

// the next 4 bytes of the bytecode is a 32-bit index into the globals table, pop the top of
// the datastack to the store value at this index
ITEM(Store_Global)

// pop value from datastack as a Type, the next 2 bytes of the bytecode is a 16-bit index
// into the `fields' table of Type push this value to the top of the datastack
ITEM(Load_Field)

// pop value from datastack as 'A
// pop value from datastack as a Type: 'B, the next 2 bytes of the bytecode is a 16-bit
// index into the `fields' table of 'B store 'A at this index into 'B.fields
ITEM(Store_Field)

// the next 2 bytes of the bytecode is a 16-bit index into the locals table, push the value
// of variable #index to the top of the datastack
ITEM(Load_Local)

// push the value of variable 0 to the top of the datastack
ITEM(Load_Local_0)
ITEM(Load_Local_1)
ITEM(Load_Local_2)
ITEM(Load_Local_3)
ITEM(Load_Local_4)
ITEM(Load_Local_5)
ITEM(Load_Local_6)
ITEM(Load_Local_7)
ITEM(Load_Local_8)
ITEM(Load_Local_9)

// the next 2 bytes of the bytecode is a 16-bit index into the locals table, pop the top
// of the datastack into variable #index
ITEM(Store_Local)

// pop the top of the datastack into variable 0
ITEM(Store_Local_0)
ITEM(Store_Local_1)
ITEM(Store_Local_2)
ITEM(Store_Local_3)
ITEM(Store_Local_4)
ITEM(Store_Local_5)
ITEM(Store_Local_6)
ITEM(Store_Local_7)
ITEM(Store_Local_8)
ITEM(Store_Local_9)

// the next 2 bytes of the bytecode is a 16-bit integer representing how many locals to
// allocate for this frame
ITEM(Alloc_Locals)

// before: a
// after:  a a
ITEM(Dup_1)

// before: a b
// after:  a b a b
ITEM(Dup_2)

// before: a b
// after:  b a
ITEM(Swap_1)

// before: a b
// after:  a b a
ITEM(Over_1)

// discard the top of the datastack
ITEM(Drop_1)

// discard the top 2 of the datastack
ITEM(Drop_2)

// discard the top 3 of the datastack
ITEM(Drop_3)

// discard the top 4 of the datastack
ITEM(Drop_4)

// the next 2 bytes of the bytecode represent a 16-bit integer 'N; discard the top 'N of the datastack
ITEM(Drop_N)

// push literal value 0.0
ITEM(Literal_Double_0)
// push literal value 1.0
ITEM(Literal_Double_1)
// push literal value 2.0
ITEM(Literal_Double_2)
// push literal value -1
ITEM(Literal_Fixnum_m1)
// push literal value 0
ITEM(Literal_Fixnum_0)
// push literal value 1
ITEM(Literal_Fixnum_1)
// push literal value 2
ITEM(Literal_Fixnum_2)
// push literal value 3
ITEM(Literal_Fixnum_3)
// push literal value 4
ITEM(Literal_Fixnum_4)
// push literal value 5
ITEM(Literal_Fixnum_5)

// length -> array_ref
ITEM(Array_New)
// array_ref index -> value
ITEM(Array_Load_Checked)
// value array_ref index ->
ITEM(Array_Store_Checked)
// array_ref index -> value
ITEM(Array_Load_Unchecked)
// value array_ref index ->
ITEM(Array_Store_Unchecked)
// array_ref -> length
ITEM(Array_Length)

ITEM(Load_String_Constant)

#undef ITEM